{"version":3,"file":"ogc.umd.js","sources":["../../../node_modules/strict-uri-encode/index.js","../../../node_modules/query-string/index.js","../src/wmsmaptype.ts"],"sourcesContent":["'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\t\treturn key => (result, value, index) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (index === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(',')];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;\n\t\t\t\tconst newValue = isArray ? value.split(',') : value;\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(input, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof input !== 'string') {\n\t\treturn ret;\n\t}\n\n\tinput = input.trim().replace(/^[?#&]/, '');\n\n\tif (!input) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of input.split('&')) {\n\t\tlet [key, value] = splitOnFirst(param.replace(/\\+/g, ' '), '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t}, options);\n\n\tconst formatter = encoderForArrayFormat(options);\n\tconst keys = Object.keys(object);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (input, options) => {\n\treturn {\n\t\turl: removeHash(input).split('?')[0] || '',\n\t\tquery: parse(extract(input), options)\n\t};\n};\n","/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/// <reference types=\"@types/googlemaps\" />\nimport { stringify } from \"query-string\";\n\n/**\n * @ignore\n */\nconst DEFAULT_WMS_PARAMS = {\n  request: \"GetMap\",\n  service: \"WMS\",\n  srs: \"EPSG:3857\"\n};\n\n/**\n * @ignore\n */\nconst EPSG_3857_EXTENT = 20037508.34789244;\n\n/**\n * @ignore\n */\nconst ORIG_X = -EPSG_3857_EXTENT; // x starts from right\n\n/**\n * @ignore\n */\nconst ORIG_Y = EPSG_3857_EXTENT; // y starts from top\n\n/**\n * Convert xyz tile coordinates to mercator bounds.\n *\n * @param x\n * @param y\n * @param zoom\n * @returns {number[]} minx, miny, maxx, maxy\n */\nfunction xyzToBounds(x: number, y: number, zoom: number): number[] {\n  const tileSize = (EPSG_3857_EXTENT * 2) / Math.pow(2, zoom);\n  const minx = ORIG_X + x * tileSize;\n  const maxx = ORIG_X + (x + 1) * tileSize;\n  const miny = ORIG_Y - (y + 1) * tileSize;\n  const maxy = ORIG_Y - y * tileSize;\n  return [minx, miny, maxx, maxy];\n}\n\ninterface WmsMapTypeOptions {\n  url: string;\n  layers: string;\n  maxZoom: number;\n  styles?: string;\n  bgcolor?: string;\n  version?: string;\n  transparent?: boolean;\n  format?: string;\n  outline?: boolean;\n  name?: string;\n  alt?: string;\n  minZoom?: number;\n  opacity?: number;\n}\n\n/**\n *\n * @param {WmsMapTypeOptions} params\n */\nconst WmsMapType = function({\n  url,\n  layers,\n  styles = \"\",\n  bgcolor = \"0xFFFFFF\",\n  version = \"1.1.1\",\n  transparent = true,\n  format = \"image/png\",\n  outline = false,\n  // google.maps.ImageMapTypeOptions interface\n  name,\n  alt,\n  maxZoom,\n  minZoom,\n  opacity\n}: WmsMapTypeOptions): google.maps.ImageMapType {\n  // currently only support tileSize of 256\n  const tileSize = new google.maps.Size(256, 256);\n\n  const params = {\n    layers,\n    styles,\n    version,\n    transparent,\n    bgcolor,\n    format,\n    outline,\n    width: tileSize.width,\n    height: tileSize.height,\n    ...DEFAULT_WMS_PARAMS\n  };\n\n  if (url.slice(-1) !== \"?\") {\n    url += \"?\";\n  }\n\n  const getTileUrl = function(coord: google.maps.Point, zoom: number): string {\n    return (\n      url +\n      stringify({\n        bbox: xyzToBounds(coord.x, coord.y, zoom).join(\",\"),\n        ...params\n      })\n    );\n  };\n\n  return new google.maps.ImageMapType({\n    getTileUrl,\n    name,\n    alt,\n    opacity,\n    maxZoom,\n    minZoom,\n    tileSize\n  });\n};\n\nexport {\n  EPSG_3857_EXTENT,\n  DEFAULT_WMS_PARAMS,\n  xyzToBounds,\n  WmsMapType,\n  WmsMapTypeOptions\n};\n"],"names":["str","encodeURIComponent","replace","x","charCodeAt","toString","toUpperCase","encode","value","options","strict","strictUriEncode","object","formatter","arrayFormat","key","result","index","length","undefined","join","encoderForArrayFormat","Object","assign","keys","sort","map","Array","isArray","reduce","filter","DEFAULT_WMS_PARAMS","request","service","srs","EPSG_3857_EXTENT","ORIG_X","ORIG_Y","xyzToBounds","y","zoom","tileSize","Math","pow","url","layers","styles","bgcolor","version","transparent","format","outline","name","alt","maxZoom","minZoom","opacity","google","maps","Size","params","width","height","slice","ImageMapType","getTileUrl","coord","stringify","bbox"],"mappings":"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"}